# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1avnWsDJfnQu4u3kYWhf7dl5Ijye0mDJJ
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd

# Custom function to fetch and parse HTML from a given URL
def get_parsed_html(link):
    try:
        res = requests.get(link)
        if res.status_code == 200:
            return BeautifulSoup(res.text, 'html.parser')
        else:
            print(f"Failed to fetch: {link}")
            return None
    except Exception as e:
        print(f"Error occurred while requesting {link}: {e}")
        return None

# Base path for the Mystery category
base_path = "https://books.toscrape.com/catalogue/category/books/mystery_3/"
relative_page = "index.html"

# List to collect book data
mystery_books = []

# Loop through pagination
while relative_page:
    page_url = base_path + relative_page
    parsed_html = get_parsed_html(page_url)

    if not parsed_html:
        break

    items = parsed_html.select('article.product_pod')

    for item in items:
        book_title = item.h3.a.get('title')
        book_price = item.select_one('p.price_color').text.strip()
        rating_classes = item.select_one('p.star-rating')['class']
        book_rating = rating_classes[1] if len(rating_classes) > 1 else "Not Rated"

        mystery_books.append({
            'Book Title': book_title,
            'Cost': book_price,
            'Rating': book_rating
        })

    # Check if there's a "next" page
    next_link = parsed_html.select_one('li.next > a')
    relative_page = next_link['href'] if next_link else None

# Convert scraped data to DataFrame
books_df = pd.DataFrame(mystery_books)

# Display the first few rows
print(books_df.head())